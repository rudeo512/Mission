/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: JspC/ApacheTomcat8
 * Generated at: 2019-04-03 19:25:19 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.partials.canvas;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class processor_002dconfiguration_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, false, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n\n<div id=\"processor-configuration\" layout=\"column\" class=\"hidden large-dialog\">\n    <div class=\"processor-configuration-tab-container dialog-content\">\n        <div id=\"processor-configuration-tabs\" class=\"tab-container\"></div>\n        <div id=\"processor-configuration-tabs-content\">\n            <div id=\"processor-standard-settings-tab-content\" class=\"configuration-tab\">\n                <div class=\"settings-left\">\n                    <div class=\"setting\">\n                        <div class=\"setting-name\">Name</div>\n                        <div id=\"processor-name-container\" class=\"setting-field\">\n                            <input type=\"text\" id=\"processor-name\" name=\"processor-name\"/>\n                            <div class=\"processor-enabled-container\">\n                                <div id=\"processor-enabled\" class=\"nf-checkbox checkbox-unchecked\"></div>\n                                <span class=\"nf-checkbox-label\"> Enabled</span>\n                            </div>\n                        </div>\n                    </div>\n");
      out.write("                    <div class=\"setting\">\n                        <div class=\"setting-name\">Id</div>\n                        <div class=\"setting-field\">\n                            <span id=\"processor-id\"></span>\n                        </div>\n                    </div>\n                    <div class=\"setting\">\n                        <div class=\"setting-name\">Type</div>\n                        <div class=\"setting-field\">\n                            <span id=\"processor-type\"></span>\n                        </div>\n                    </div>\n                    <div class=\"setting\">\n                        <div class=\"setting-name\">Bundle</div>\n                        <div id=\"processor-bundle\" class=\"setting-field\"></div>\n                    </div>\n                    <div class=\"setting\">\n                        <div class=\"penalty-duration-setting\">\n                            <div class=\"setting-name\">\n                                Penalty duration\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The amount of time used when this processor penalizes a FlowFile.\"></div>\n");
      out.write("                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"penalty-duration\" name=\"penalty-duration\" class=\"small-setting-input\"/>\n                            </div>\n                        </div>\n                        <div class=\"yield-duration-setting\">\n                            <div class=\"setting-name\">\n                                Yield duration\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"When a processor yields, it will not be scheduled again until this amount of time elapses.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"yield-duration\" name=\"yield-duration\" class=\"small-setting-input\"/>\n                            </div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                    <div class=\"setting\">\n");
      out.write("                        <div class=\"bulletin-setting\">\n                            <div class=\"setting-name\">\n                                Bulletin level\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The level at which this processor will generate bulletins.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <div id=\"bulletin-level-combo\"></div>\n                            </div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                </div>\n                <div class=\"spacer\">&nbsp;</div>\n                <div class=\"settings-right\">\n                    <div class=\"setting\">\n                        <div class=\"setting-name\">\n                            Automatically terminate relationships\n                            <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"Will automatically terminate FlowFiles sent to a given relationship if it is not defined elsewhere.\"></div>\n");
      out.write("                        </div>\n                        <div class=\"setting-field\">\n                            <div id=\"auto-terminate-relationship-names\"></div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div id=\"processor-scheduling-tab-content\" class=\"configuration-tab\">\n                <div class=\"settings-left\">\n                    <div class=\"setting\">\n                        <div class=\"scheduling-strategy-setting\">\n                            <div class=\"setting-name\">\n                                Scheduling strategy\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The strategy used to schedule this processor.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <div type=\"text\" id=\"scheduling-strategy-combo\"></div>\n                            </div>\n                        </div>\n                        <div id=\"event-driven-warning\" class=\"hidden\">\n");
      out.write("                            <div class=\"processor-configuration-warning-icon\"></div>\n                            This strategy is experimental\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                    <div id=\"timer-driven-options\" class=\"setting\">\n                        <div class=\"concurrently-schedulable-tasks-setting\">\n                            <div class=\"setting-name\">\n                                Concurrent tasks\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The number of tasks that should be concurrently scheduled for this processor.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"timer-driven-concurrently-schedulable-tasks\" name=\"timer-driven-concurrently-schedulable-tasks\" class=\"small-setting-input\"/>\n                            </div>\n                        </div>\n                        <div class=\"scheduling-period-setting\">\n");
      out.write("                            <div class=\"setting-name\">\n                                Run schedule\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The amount of time that should elapse between task executions.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"timer-driven-scheduling-period\" name=\"timer-driven-scheduling-period\" class=\"small-setting-input\"/>\n                            </div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                    <div id=\"event-driven-options\" class=\"setting\">\n                        <div class=\"concurrently-schedulable-tasks-setting\">\n                            <div class=\"setting-name\">\n                                Concurrent tasks\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The number of tasks that should be concurrently scheduled for this processor.\"></div>\n");
      out.write("                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"event-driven-concurrently-schedulable-tasks\" name=\"event-driven-concurrently-schedulable-tasks\" class=\"small-setting-input\"/>\n                            </div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                    <div id=\"cron-driven-options\" class=\"setting\">\n                        <div class=\"concurrently-schedulable-tasks-setting\">\n                            <div class=\"setting-name\">\n                                Concurrent tasks\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The number of tasks that should be concurrently scheduled for this processor.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"cron-driven-concurrently-schedulable-tasks\" name=\"cron-driven-concurrently-schedulable-tasks\" class=\"small-setting-input\"/>\n");
      out.write("                            </div>\n                        </div>\n                        <div class=\"scheduling-period-setting\">\n                            <div class=\"setting-name\">\n                                Run schedule\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The CRON expression that defines when this processor should run.\"></div>\n                            </div>\n                            <div class=\"setting-field\">\n                                <input type=\"text\" id=\"cron-driven-scheduling-period\" name=\"cron-driven-scheduling-period\" class=\"small-setting-input\"/>\n                            </div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                    <div id=\"execution-node-options\" class=\"setting\">\n                        <div class=\"execution-node-setting\">\n                            <div class=\"setting-name\">\n                                Execution\n                                <div class=\"fa fa-question-circle\" alt=\"Info\" title=\"The node(s) that this processor will be scheduled to run on when clustered.\"></div>\n");
      out.write("                            </div>\n                            <div class=\"setting-field\">\n                                <div id=\"execution-node-combo\"></div>\n                            </div>\n                        </div>\n                        <div class=\"clear\"></div>\n                    </div>\n                </div>\n                <div class=\"spacer\">&nbsp;</div>\n                <div id=\"run-duration-setting-container\" class=\"settings-right\">\n                    <div class=\"setting\">\n                        <div class=\"setting-name\">\n                            Run duration\n                            <div class=\"fa fa-question-circle\" alt=\"Info\"\n                                 title=\"When scheduled to run, the processor will continue running for up to this duration. A run duration of 0ms will execute once when scheduled.\"></div>\n                        </div>\n                        <div class=\"setting-field\" style=\"overflow: visible;\">\n                            <div id=\"run-duration-container\">\n");
      out.write("                                <div id=\"run-duration-labels\">\n                                    <div id=\"run-duration-zero\">0ms</div>\n                                    <div id=\"run-duration-one\">25ms</div>\n                                    <div id=\"run-duration-two\">50ms</div>\n                                    <div id=\"run-duration-three\">100ms</div>\n                                    <div id=\"run-duration-four\">250ms</div>\n                                    <div id=\"run-duration-five\">500ms</div>\n                                    <div id=\"run-duration-six\">1s</div>\n                                    <div id=\"run-duration-seven\">2s</div>\n                                    <div class=\"clear\"></div>\n                                </div>\n                                <div id=\"run-duration-slider\"></div>\n                                <div id=\"run-duration-explanation\">\n                                    <div id=\"min-run-duration-explanation\">Lower latency</div>\n                                    <div id=\"max-run-duration-explanation\">Higher throughput</div>\n");
      out.write("                                    <div class=\"clear\"></div>\n                                </div>\n                                <div id=\"run-duration-data-loss\" class=\"hidden\">\n                                    <div class=\"processor-configuration-warning-icon\"></div>\n                                    Source Processors with a run duration greater than 0ms and no incoming connections could lose data when NiFi is shutdown.\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div id=\"processor-properties-tab-content\" class=\"configuration-tab\">\n                <div id=\"processor-properties\"></div>\n            </div>\n            <div id=\"processor-comments-tab-content\" class=\"configuration-tab\">\n                <textarea cols=\"30\" rows=\"4\" id=\"processor-comments\" name=\"processor-comments\" class=\"setting-input\"></textarea>\n            </div>\n        </div>\n    </div>\n</div>\n<div id=\"new-processor-property-container\"></div>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
